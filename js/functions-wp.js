/**********************************
 * WORDPRESS JAVASCRIPT FUNCTIONS *
 **********************************/

/*
 * Function to retrieve Social Media content from server via an AJAX call i.e. popups.
 * 
 * Parameters:
 * - path			: Path of current script, used to construct AJAX call.
 * - site			: Name of Social Media site.
 * - id				: Social Media ID e.g. User Account, Page Name etc.
 * - infoType		: Type of content required i.e. type of info to be generated by the server.
 * - numPosts		: Maximum number of Posts to retrieve per ID.
 */
function snc_getSocialMediaContent ( path, site, id, infoType, numPosts ) {

	//alert("path=" + path + ", site=" + site + ", id=" + id + ", infoType=" + infoType + ", numPosts=" + numPosts);

	var	action = "snc_" + site + "_posts",
		popupTitle = "";
		
	// Allocate a title to the Popup
	if ( site == "facebook" ) {
		if ( infoType == "post" ) {
			popupTitle = "Facebook Post";
		} else if ( infoType == "profile" ) {
			popupTitle = "Facebook Page Profile";
		} else {
			popupTitle = "<title needed>";
		}
	} else if ( site == "twitter" ) {
		if ( infoType == "hashtag" ) {
			popupTitle = "HashTag Tweets: " + id;
		} else if ( infoType == "profile" ) {
			popupTitle = "User Profile: " + id;
		} else if ( infoType == "symbol" ) {
			popupTitle = "Symbol Tweets: " + id;
		} else {
			popupTitle = "<title needed>";
		}
	}

	// Wordpress AJAX call to server
    jQuery.post( the_ajax_script.ajax_url,
		{
			ids:		[id],
			action:		action,
			infoType:	infoType,
			numPosts:	numPosts,
			t:			Math.random(),
		},
		function( response, status ) {
			var json = JSON.parse( response );
			if ( status == "success" ) {
				
				// Check if User access has been revoked
				if ( site == "twitter" && typeof( json.twLogin ) != 'undefined' && json.twLogin == true ) {
					snc_doInitTwitterLogin ( "sncTwLoginArea", "Y" );
				} else if ( site == "twitter" ) {
					snc_doInitTwitterLogin ( "sncTwLoginArea", "" );
				}

				// Report any errors to user
				if ( typeof( json.error ) != 'undefined' ) {
					document.getElementById( "sncMsgTxt" ).innerHTML = "<strong>ERROR:</strong> <em>" + json.error + "</em>";
				} else {

					// Report any warnings or messages to user
					if ( typeof( json.warning ) != 'undefined' ) {
						document.getElementById( "sncMsgTxt" ).innerHTML = "<strong>WARNING:</strong> " + json.warning;
					} else if ( typeof( json.message ) != 'undefined' ) {
						document.getElementById( "sncMsgTxt" ).innerHTML = json.message;
					}

					//alert(json.data);
					
					// Populate popups with Profile or Post but multiple Posts need to be sorted via Isotope
					if ( infoType == "profile" ) {

						jQuery.magnificPopup.open({
							items: {
								src:	'<div class="magnific-profile-popup">' + 
											'<div align="center" class="magnific-popup-title">' + 
												popupTitle + 
											'</div>' + 
											json.data + 
										'</div>',
								type: "inline"
							}
						});

						// Parse Facebook content so Like & Share buttons are rendered
						if ( typeof( FB ) != 'undefined' ) {
							FB.XFBML.parse( document.getElementById( "magnific-profile-popup" ) );
						}
					} else if ( infoType == "post" ) {

						jQuery.magnificPopup.open({
							items: {
								src:	'<div class="magnific-profile-popup">' + 
											'<div align="center" class="magnific-popup-title">' + 
												popupTitle + 
											'</div>' + 
											json.data + 
										'</div>',
								type: "inline"
							}
						});

						// Parse Facebook content so Like & Share buttons are rendered
						if ( typeof( FB ) != 'undefined' ) {
							FB.XFBML.parse( document.getElementById( "magnific-profile-popup" ) );
						}
					} else {
						if ( json.hasOwnProperty( "data" ) && json.data != "" ) {

							jQuery.magnificPopup.open({
								items: {
									src: 	'<div class="magnific-items-popup">' +
												'<div align="center" class="magnific-popup-title">' + 
													popupTitle + 
												'</div>' + 
												'<div id="sncPopUpContainer"></div>' +
											'</div>',
									type: "inline"
								}
							});

							// Populate Isotope popup with Posts
							snc_doInitIsotope( "sncPopUpContainer", json.data, "sncPopUpPostItem", site );
						} else if ( typeof( json.warning ) != 'undefined' ) {
							
							// Display warning in a pop-up box in case of API limit being exceeded e.g. Twitter hashtag or symbol posts
							document.getElementById( "magnific-inline-popup" ).innerHTML = "<p align=\"center\"><strong>WARNING:</strong> " + json.warning + "</p>";
						}
					}
				}
			} else {
				document.getElementById( "sncMsgTxt" ).innerHTML = "<strong>ERROR:</strong> <em>Call to '" + action + "' returned status = '" + status + "'</em>!";
			}
		}
	);	
}

/*
 * Function to despatch server-side calls for Social Media posts.
 * 
 * Parameters:
 * - jsonParams		: JSON object of parameters.
 */
function snc_getSocialMediaPosts ( jsonParams ) {
	
	//alert( "functions-wp.js - snc_getSocialMediaPosts()" );
	
	var containerName = jsonParams['target'], 
		ids = jsonParams['ids'],
		site = jsonParams['site'],
		numPosts = jsonParams['numPosts'],
		maxPosts = jsonParams['maxPosts'],
		infoType = jsonParams['infoType'],
		action = "snc_" + jsonParams['site'] + "_posts",
		siteName = site.charAt(0).toUpperCase() + site.slice(1);
	
	document.getElementById( "sncMsgTxt" ).innerHTML = "Retrieving latest " + siteName + " posts...";
	
	//alert( "jsonParams=" + JSON.stringify( jsonParams, null, 2 ) );
	
	// Check if the maxPosts is likely to be exceeded due to the number of IDs x numPosts, if so recalculate numPosts.
	if ( ids && ids.length * numPosts > maxPosts ) {
		numPosts = Math.floor( maxPosts / ids.length );
		//alert( "numPosts=" + numPosts + ", maxPosts=" + maxPosts );
	}
	
	// Wordpress AJAX call to server
    jQuery.post( the_ajax_script.ajax_url,
		{
			ids:		ids,
			action:		action,
			infoType:	infoType,
			numPosts:	numPosts,
			maxPosts:	maxPosts
		},
		function( response, status ) {
			//alert( "response=" + JSON.stringify( response, null, 2 ) );
			var json = JSON.parse( response );
			//alert( "response=" + JSON.stringify( json, null, 2 ) );
			if ( status == "success" ) {
				
				//alert( "snc_getSocialMediaPosts(): jsonParams['site']=" +jsonParams['site'] +", json.inLogin=" +json.inLogin );

				// Check if User access has been revoked
				if ( jsonParams['site'] == "instagram" && typeof( json.inLogin ) != 'undefined' && json.inLogin == true ) {
					snc_doInitInstagramLogin ( "sncInLoginArea", "Y" );
				} else if ( jsonParams['site'] == "instagram" ) {
					snc_doInitInstagramLogin ( "sncInLoginArea", "" );
				}

				// Check if User access has been revoked
				if ( jsonParams['site'] == "twitter" && typeof( json.twLogin ) != 'undefined' && json.twLogin == true ) {
					snc_doInitTwitterLogin ( "sncTwLoginArea", "Y" );
				} else if ( jsonParams['site'] == "twitter" ) {
					snc_doInitTwitterLogin ( "sncTwLoginArea", "" );
				}

				// Report any errors to user
				if ( typeof( json.error ) != 'undefined' ) {
					document.getElementById( "sncMsgTxt" ).innerHTML = "<strong>ERROR:</strong> <em>" + json.error + "</em>";
				} else {

					// Report any warnings or messages to user
					if ( typeof( json.warning ) != 'undefined' ) {
						//document.getElementById( "sncMsgTxt" ).innerHTML = "<strong>WARNING:</strong> " + json.warning;
					} else if ( typeof( json.message ) != 'undefined' ) {
						document.getElementById( "sncMsgTxt" ).innerHTML = json.message;
					}

					snc_doInitIsotope( containerName, json.data, "sncItem", site );
					//document.getElementById( "sncMsgTxt" ).innerHTML += siteName + " loaded.<br />";
				}
			} else {
				document.getElementById( "sncMsgTxt" ).innerHTML = "<strong>ERROR:</strong> <em>Call to '" + action + "' returned status = '" + status + "'</em>!";
			}
		}
	);
}

/*
 * Function to despatch server-side calls for the current admin to Login to Instagram after saving the settings.
 * 
 * Parameters:
 * - clientIdFieldId			: ID of Client ID field.
 * - clientSecretFieldId		: ID of Client Secret field.
 * - returnUrl					: URL of page to return to after logging in.
 */
function snc_doLoginInAdmin ( clientIdFieldId, clientSecretFieldId, returnUrl ) {

	//alert( "snc_doLoginInAdmin() - login to Instagram: returnUrl=" + returnUrl );

	/*
	alert( 'snc_doLoginInAdmin():' 
		+'\n- clientIdFieldId=' +clientIdFieldId 
		+'\n- clientSecretFieldId=' +clientSecretFieldId 
		+'\n- returnUrl=' +returnUrl 
	);
	*/

	// Retrieve Form parameters
	var clientId = document.getElementById( clientIdFieldId ).value;
	var clientSecret = document.getElementById( clientSecretFieldId ).value;

	/*
	alert( 'snc_getInstagramCode():'
		+'\n- clientId=' +clientId 
		+'\n- clientSecret=' +clientSecret 
	);
	*/
	
	// Check needed parameters are present
	if ( clientId == "" || clientSecret == "" ) {
		$msg = "Missing Instagram parameters:";
		if ( clientId == "" ) {
			$msg = $msg +"\n" +"- Client ID";
		}
		if ( clientSecret == "" ) {
			$msg = $msg +"\n" +"- Client Secret";
		}
		alert( $msg );
	} else {

		// Save parameters to database so that they are available upon returning to the Settings page
		
		action = "snc_instagram_save_settings";

		// Wordpress AJAX call to server
		jQuery.post( the_ajax_script.ajax_url,
			{
				action:			action,
				clientId:		clientId,
				clientSecret:	clientSecret
			},
			function( response, status ) {
				var json = JSON.parse( response );
				if ( status == "success" ) {

					// Report any errors to user & check if authorization URL has been provided
					if ( typeof( json.error ) != "undefined"  && json.error != "" ) {
						document.getElementById( "sncMsgTxt" ).innerHTML = "<strong>ERROR:</strong> <em>" + json.error + "</em>";
					} else {

						// Continue to Login to Instagram
						snc_doLoginInUser( returnUrl );
					}
				} else {
					document.getElementById( "sncMsgTxt" ).innerHTML = "<strong>ERROR:</strong> <em>Call to '" + action + "' returned status = '" + status + "'</em>!";
				}
			}
		);
	}
}

/*
 * Function to despatch server-side calls for the current user to Login to Instagram.
 * 
 * Parameters:
 * - returnUrl		: URL of page to return to after logging in.
 */
function snc_doLoginInUser ( returnUrl ) {

	//alert( "snc_doLoginInUser() - login to Instagram: returnUrl=" + returnUrl );
	
	action = "snc_instagram_login";

	// Wordpress AJAX call to server
    jQuery.post( the_ajax_script.ajax_url,
		{
			action:		action,
			returnUrl:	returnUrl
		},
		function( response, status ) {
			var json = JSON.parse( response );
			if ( status == "success" ) {

				// Report any errors to user & check if authorization URL has been provided
				if ( typeof( json.error ) != "undefined"  && json.error != "" ) {
					document.getElementById( "sncMsgTxt" ).innerHTML = "<strong>ERROR:</strong> <em>" + json.error + "</em>";
				} else if ( typeof( json.url ) != "undefined" && json.url != "" ) {

					// Redirect browser to Instagram to carry out Authorization
					window.location.href = json.url;
				}
			} else {
				document.getElementById( "sncMsgTxt" ).innerHTML = "<strong>ERROR:</strong> <em>Call to '" + action + "' returned status = '" + status + "'</em>!";
			}
		}
	);
}

/*
 * Function to despatch server-side calls for the current user to Logout from Instagram.
 * 
 * Parameters:
 * - returnUrl		: URL of page to return to after logging out.
 */
function snc_doLogoutInUser ( returnUrl ) {

	//alert( "snc_doLogoutInUser() - logout of Instagram: returnUrl=" + returnUrl );
	
	action = "snc_instagram_logout";

	// Wordpress AJAX call to server
    jQuery.post( the_ajax_script.ajax_url,
		{
			action:		action
		},
		function( response, status ) {
			if ( status == "success" ) {
				window.location.href = returnUrl;
			} else {
				document.getElementById( "sncMsgTxt" ).innerHTML = "<strong>ERROR:</strong> <em>Call to '" + action + "' returned status = '" + status + "'</em>!";
			}
		}
	);
}

/*
 * Function to despatch server-side calls for the current user to Login to Twitter.
 * 
 * Parameters:
 * - returnUrl		: URL of page to return to after logging in.
 */
function snc_doLoginTwUser ( returnUrl ) {

	//alert( "snc_doLoginTwUser() - login to Twitter: returnUrl=" + returnUrl );
	
	action = "snc_twitter_login";

	// Wordpress AJAX call to server
    jQuery.post( the_ajax_script.ajax_url,
		{
			action:		action,
			returnUrl:	returnUrl
		},
		function( response, status ) {
			var json = JSON.parse( response );
			if ( status == "success" ) {

				// Report any errors to user & check if authorization URL has been provided
				if ( typeof( json.error ) != "undefined"  && json.error != "" ) {
					document.getElementById( "sncMsgTxt" ).innerHTML = "<strong>ERROR:</strong> <em>" + json.error + "</em>";
				} else if ( typeof( json.url ) != "undefined" && json.url != "" ) {

					// Redirect browser to Twitter to carry out Authorization
					window.location.href = json.url;
				}
			} else {
				document.getElementById( "sncMsgTxt" ).innerHTML = "<strong>ERROR:</strong> <em>Call to '" + action + "' returned status = '" + status + "'</em>!";
			}
		}
	);
}

/*
 * Function to despatch server-side calls for the current user to Logout from Twitter.
 * 
 * Parameters:
 * - returnUrl		: URL of page to return to after logging out.
 */
function snc_doLogoutTwUser ( returnUrl ) {

	//alert( "snc_doLogoutTwUser() - logout of Twitter: returnUrl=" + returnUrl );
	
	action = "snc_twitter_logout";

	// Wordpress AJAX call to server
    jQuery.post( the_ajax_script.ajax_url,
		{
			action:		action
		},
		function( response, status ) {
			if ( status == "success" ) {
				window.location.href = returnUrl;
			} else {
				document.getElementById( "sncMsgTxt" ).innerHTML = "<strong>ERROR:</strong> <em>Call to '" + action + "' returned status = '" + status + "'</em>!";
			}
		}
	);
}

/*
 * Function to open a Media Link in a Popup box.
 * 
 * Parameters:
 * - mediaUrl		: URL of media content.
 * - mediaType		: Type of media content e.g. 'image' or 'media' for all other content.
 */
function snc_doOpenPopupLink ( mediaUrl, mediaType ) {
	
	//alert( "mediaUrl=" +mediaUrl +", mediaType=" +mediaType );
	
	if ( mediaType == "image" ) {
		jQuery.magnificPopup.open({
			items: {
				src:	mediaUrl,
				type:	"image"
			}
		});
	} else {
		jQuery.magnificPopup.open({
			items: {
				src:	mediaUrl,
				type:	"iframe"
			},
			disableOn: 700,
			mainClass: "mfp-fade",
			removalDelay: 160,
			preloader: false,
			fixedContentPos: false
		});
	}
}
	
/*
 * Function to parse media links in order for them to appear in popups.
 */
function snc_doParsePopupLinks () {

	//alert( "snc_doParsePopupLinks()" );
	
	// Scan HTML for links to images
	jQuery( ".magnific-image-link" ).magnificPopup({
		type: "image"
		// other options
	});
	
	// Scan HTML for links to other media
	jQuery( ".magnific-popup-youtube, .magnific-popup-vimeo, .magnific-popup-amazon, .magnific-popup-gmaps" ).magnificPopup({
		disableOn: 700,
		type: "iframe",
		mainClass: "mfp-fade",
		removalDelay: 160,
		preloader: false,
		fixedContentPos: false
	});
}

/*
 * Function to handle the generation of a Code for Instagram.
 * 
 * Parameters:
 * - clientIdFieldId			: ID of Client ID field.
 * - clientSecretFieldId		: ID of Client Secret field.
 * - accessTokenFieldId			: ID of Access Token field.
 * - accessTokenStatusFieldId	: ID of Access Token Status field.
 * - iframeFieldId				: ID of <iframe> field.
 * - redirectUri				: URI for Instagram API to redirect to.
 */
function snc_getInstagramCode ( clientIdFieldId, clientSecretFieldId, accessTokenFieldId, accessTokenStatusFieldId, iframeFieldId, redirectUri ) {
	
	/*
	alert( 'snc_getInstagramCode():' 
		+'\n- clientIdFieldId=' +clientIdFieldId 
		+'\n- clientSecretFieldId=' +clientSecretFieldId 
		+'\n- accessTokenFieldId=' +accessTokenFieldId 
		+'\n- accessTokenStatusFieldId=' +accessTokenStatusFieldId 
		+'\n- iframeFieldId=' +iframeFieldId 
		+'\n- redirectUri=' +redirectUri 
	);
	*/

	// Retrieve Form parameters
	var clientId = document.getElementById( clientIdFieldId ).value;
	var clientSecret = document.getElementById( clientSecretFieldId ).value;
	var accessTokenField = document.getElementById( accessTokenFieldId );
	var accessTokenAltField = document.getElementById( accessTokenFieldId +"_alt" );
	var accessTokenStatusField = document.getElementById( accessTokenStatusFieldId );
	var accessTokenStatusAltField = document.getElementById( accessTokenStatusFieldId +"_alt" );
	var iframeField = document.getElementById( iframeFieldId );

	/*
	alert( 'snc_getInstagramCode():'
		+'\n- clientId=' +clientId 
		+'\n- clientSecret=' +clientSecret 
	);
	*/
	
	// Check needed parameters are present
	if ( clientId == "" || clientSecret == "" ) {
		$msg = "Missing Instagram parameters:";
		if ( clientId == "" ) {
			$msg = $msg +"\n" +"- Client ID";
		}
		if ( clientSecret == "" ) {
			$msg = $msg +"\n" +"- Client Secret";
		}
		alert( $msg );
	} else {
		accessTokenField.value = "";
		accessTokenAltField.value = accessTokenField.value;
		accessTokenStatusField.value = "invalid";
		accessTokenStatusAltField.value = accessTokenStatusField.value;
		
		// Call to Instagram API to retrieve Code
		apiURL = "https://api.instagram.com/oauth/authorize/?client_id=" +clientId +"&redirect_uri=" +redirectUri +"&response_type=code";
		//alert( 'apiURL=' +apiURL );
		iframeField.src = apiURL;
	}
}

/*
 * Function to handle the generation of an Access Token for Instagram.
 * 
 * Parameters:
 * - clientIdFieldId			: ID of Client ID field.
 * - clientSecretFieldId		: ID of Client Secret field.
 * - accessTokenFieldId			: ID of Access Token field.
 * - accessTokenStatusFieldId	: ID of Access Token Status field.
 * - code						: Code received from Instagram API.
 */
function snc_getInstagramAccessToken ( clientIdFieldId, clientSecretFieldId, accessTokenFieldId, accessTokenStatusFieldId, code ) {
	
	/*
	alert( 'snc_getInstagramAccessToken():' 
		+'\n- clientIdFieldId=' +clientIdFieldId 
		+'\n- clientSecretFieldId=' +clientSecretFieldId 
		+'\n- accessTokenFieldId=' +accessTokenFieldId 
		+'\n- accessTokenStatusFieldId=' +accessTokenStatusFieldId 
		+'\n- code=' +code 
	);
	*/

	// Retrieve Form parameters
	var clientId = document.getElementById( clientIdFieldId ).value;
	var clientSecret = document.getElementById( clientSecretFieldId ).value;
	var accessTokenField = document.getElementById( accessTokenFieldId );
	var accessTokenAltField = document.getElementById( accessTokenFieldId +"_alt" );
	var accessTokenStatusField = document.getElementById( accessTokenStatusFieldId );
	var accessTokenStatusAltField = document.getElementById( accessTokenStatusFieldId +"_alt" );

	/*
	alert( 'snc_getInstagramAccessToken():'
		+'\n- clientId=' +clientId 
		+'\n- clientSecret=' +clientSecret 
		+'\n- code=' +code 
	);
	*/
	
	// Check needed parameters are present
	if ( clientId == "" || clientSecret == "" || code == "" ) {
		$msg = "Missing Instagram parameters:";
		if ( clientId == "" ) {
			$msg = $msg +"\n" +"- Client ID";
		}
		if ( clientSecret == "" ) {
			$msg = $msg +"\n" +"- Client Secret";
		}
		if ( code == "" ) {
			$msg = $msg +"\n" +"- Code (generated by Instagram API)";
		}
		alert( $msg );
	} else {
		
		// Call to Instagram API to retrieve Access Token
		//alert( 'AJAX call to generate Access Token' );
		action = "snc_get_instagram_access_token";

		// Wordpress AJAX call to server
		jQuery.post( the_ajax_script.ajax_url,
			{
				action:			action,
				clientId:		clientId,
				clientSecret:	clientSecret,
				code:			code
			},
			function( response, status ) {
				//alert( "response=" + JSON.stringify( response, null, 2 ) );
				var json = JSON.parse( response );
				//alert( "response=" + JSON.stringify( json, null, 2 ) );
				if ( status == "success" ) {

					// Report any errors to user & check if authorization URL has been provided
					if ( typeof( json.error ) != "undefined"  && json.error != "" ) {
						alert( "Unable to generate Access Token" );
					} else if ( typeof( json.accessToken ) != "undefined" && json.accessToken != "" ) {

						// Update Access Token setting with value returned from Instagram
						accessTokenField.value = json.accessToken;
						accessTokenAltField.value = accessTokenField.value;
						accessTokenStatusField.value = "valid";
						accessTokenStatusAltField.value = accessTokenStatusField.value;
					}
				} else {
					alert( "Unable to generate Access Token" );
				}
			}
		);
	}
}

